# Platforms commented out seem
# to be a PITA to compile without
# too much tooling, we'll have a 
# look at those later on.
#
# "linux/mips"
#"linux/mipsle"
# "linux/mips64"
# "linux/mips64le"
# "darwin/arm"
# "plan9/386"
# "plan9/amd64"
# "openbsd/386"
# "openbsd/amd64"
# "openbsd/arm"
# "dragonfly/amd64"
# "android/arm"
# "solaris/amd64"

# freebsd and netbsd can be easily
# built, but we opt to keep them
# out as the userbase doesn't seem
# to be there.
#
# "freebsd/386",
# "freebsd/amd64",
# "freebsd/arm",
# "netbsd/386",
# "netbsd/amd64",
# "netbsd/arm"

platforms = [
    "linux/386",
    "linux/amd64",
    "linux/arm",
    "linux/arm64",
    "linux/ppc64",
    "linux/ppc64le",
    "linux/arm",
    "linux/arm64",
    "windows/amd64",
    "windows/386",
    "darwin/amd64",
    "darwin/386",
    "js/wasm"
]

echo("Deleting previous builds...")
rm = `rm -rf builds/abs-*`

if !rm.ok {
    return echo("error: " + rm)
}

version = `cat ./main.go | grep "var Version"`
version = version.slice(15, len(version) - 1)
echo("Running builds for version %s, confirm by typing \"y\"".fmt(version))
selection = stdin()

if selection != "y" {
    exit(2)
}

for platform in platforms {
    goos, goarch = platform.split("/")
    output_name = "builds/abs-%s-%s-%s".fmt(version, goos, goarch)
    entry_point = "main.go"

    if goos == "windows" {
        output_name = output_name + ".exe"
    }

    if goos == "js" {
        output_name = "docs/abs.wasm"
        entry_point = "js/js.go"
    }

    echo("Building %s %s", goos, goarch)
    build = `GOOS=$goos GOARCH=$goarch go build -ldflags="-s -w" -o $output_name $entry_point`

    if !build.ok {
        echo("error: " + build)
        exit(1)
    }
}

echo("done")
